class Solution {
public:
ListNode* findmid(ListNode* head){
    if(head==nullptr)return nullptr;
    ListNode* slow=head;
    ListNode* fast=head->next;
    while(fast!=nullptr && fast->next!=nullptr){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}
ListNode* mergelist(ListNode* list1 , ListNode* list2){
    if(list1==nullptr)return list2;
    if(list2==nullptr)return list1;
      
        ListNode* dummynode=new  ListNode(-1);
         ListNode* temp=dummynode;
         while(list1!=nullptr && list2!=nullptr){
            if(list1->val<list2->val){
                temp->next=list1;
                
                list1=list1->next;
            }else{
                  temp->next=list2;
                
                list2=list2->next;
            }
            temp=temp->next;
         }
            if(list1) temp->next=list1;
            else{
                temp->next=list2;
            }
            
         
return dummynode->next;
}

    ListNode* sortList(ListNode* head) {
        if(head==nullptr || head->next==nullptr)return head;
    
     ListNode* middle= findmid(head);
      ListNode* right=middle->next;
      middle->next=nullptr;
      ListNode* left=head;
      left=sortList(left);
      right=sortList(right);
      return mergelist(left,right);
    }
};
