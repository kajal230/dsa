class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
    map<int,int>hm;
    if(inorder.size()!=postorder.size())return nullptr;
    for(int i=0; i<inorder.size(); i++){
        hm[inorder[i]]=i;
    }
        return buildtreefromip(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,hm);
    }
    TreeNode* buildtreefromip(vector<int>& inorder,int is, int ie,
     vector<int>& postorder, int ps, int pe, map<int,int>&hm){
        if(is>ie || ps>pe)return nullptr;
        TreeNode* root= new TreeNode(postorder[pe]);
        int inroot=hm[postorder[pe]];
        int numsleft=inroot-is;
        root->left = buildtreefromip(inorder, is, inroot-1,
                                     postorder, ps, ps+numsleft-1, hm);

        root->right = buildtreefromip(inorder, inroot+1, ie,
                                      postorder, ps+numsleft, pe-1, hm);
     return root;
   
    }
};
